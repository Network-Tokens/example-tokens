#!/usr/bin/env python3

from cbor2 import dumps, loads
from cose import SymmetricKey, Sign1Message, CoseAlgorithms, KeyOps, \
    CoseHeaderKeys, EC2, CoseEllipticCurves, OKP
from cose.keys.cosekey import CoseKey, KTY
from itertools import zip_longest
import time


ONE_WEEK = 60 * 60 * 24 * 7


def group(n, iterable, fillvalue=None): 
    args = [iter(iterable)] * n
    return zip_longest(fillvalue=fillvalue, *args)

def dump_c_hex(data):
    return ', '.join([''.join(['0x', *x]) for x in group(2, data.hex())])

cose_key = OKP.generate_key(algorithm=CoseAlgorithms.EDDSA,
        key_ops=KeyOps.SIGN)

cwetoken1 = Sign1Message(
    {CoseHeaderKeys.ALG: CoseAlgorithms.EDDSA},
    {},
    dumps({
        'bip': '10.0.0.208',
        'exp': int(time.time() + ONE_WEEK),
        'sid': 97046299,
    })
).encode(cose_key)

# Encode the public key in a CBOR array
pubkey = cose_key.x

pubkey = OKP.from_cose_key_obj({
    CoseKey.Common.KTY: KTY.OKP,
    CoseKey.Common.ALG: CoseAlgorithms.EDDSA,
    OKP.OKPPrm.X: pubkey,
})

decoded = Sign1Message.decode(cwetoken1)
valid = decoded.verify_signature(pubkey)

print("=========================================================")
print("PUB:    %s" % pubkey.hex())
print("PRIV:   %s" % cose_key.d.hex())
print("TOKEN:  %s" % cwetoken1.hex())
print("=========================================================")
